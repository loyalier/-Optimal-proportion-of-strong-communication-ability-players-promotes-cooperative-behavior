// Prisoners Dilemma game on a small-world graph constructed from a square lattice
// Some players are blocked to give their strategy (other players cannot adopt their strategy)

#define  _CRT_SECURE_NO_WARNINGS

// standard include
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <system_error>  // ���ڻ�ȡϵͳ������Ϣ
#include <windows.h>     // ���ڻ�ȡWindowsϵͳ������Ϣ


using namespace std;

// define priority classes
#define NORMAL_PRIORITY_CLASS       0x00000020
#define IDLE_PRIORITY_CLASS         0x00000040
#define HIGH_PRIORITY_CLASS         0x00000080
#define REALTIME_PRIORITY_CLASS     0x00000100

// define parameters
#define L           100      /* lattice size                   */
#define SIZE        (L*L)    /* number of sites                */
#define MC_STEPS    100000   /* run-time in MCS     */
#define OUT_STEPS    5000   /* Last 5000 steps  */
//#define r               /* temptation to defect */
#define K           0.1      /* temperature */
#define Q           0      /* Q portion of links are rewired */
#define NAMEOUT     "K4b075r5Q2"
#define RANDOMIZE   3145215
#define NEIMUN      8
#define GROUP_SIZE  4 //ÿ�������
#define GROUP_NUM   (SIZE/GROUP_SIZE)  //һ���ֶܷ�����
double b;
double para_a = 0.15;  //�ϲ�����²��Ӱ�����
double payoff_matrix[2][2] = { {1, 0},
							   {b, 0} };
int changetype_down[4] = {0,0,0,0};//0CC,1CD,2DC,3DD,��¼��һ��C��һ�ֻ���C������

#define update_payoff_matrix(b) payoff_matrix[1][0] = b;

typedef int       tomb1[SIZE];
typedef long int  tomb3[SIZE][NEIMUN];
typedef double    tomb4[SIZE];

tomb1 age_up;  //�ò��ϵ�����
tomb1 age_down;  //�ò��ϵ�����
int age_T = 0;  //�ò��ϵ�����


tomb1 player_s_up;   //�ϲ���ҵĲ���
tomb1 player_s_down;  //�²���ҵĲ���
tomb3 player_n;  //��¼��ҵ��ھ����

double p[SIZE];  //����RL��һ��������ĺ�������
double bt = 1;  //��
double A = 0.5;  //����

int cnt_s_up[2];  //cnt_s_up[0]��¼�ϲ������ѡ�������������cnt_s_up[1]��¼�ϲ������ѡ���ѵ�����
int cnt_s_down[2];  //cnt_s_down[0]��¼�ϲ������ѡ�������������cnt_s_down[1]��¼�ϲ������ѡ���ѵ�����
int group[GROUP_NUM][GROUP_SIZE];  //group[i][j]��������¼��i����ĸ���ҵ����
int player_group[SIZE];  //��¼���x����һ���
int tag_up[SIZE];//��¼��ǩ
int tag_down[SIZE];
int same_down[SIZE];//��¼��Χ��ǩ��ͬ����ҵĸ���
int same_up[SIZE];
double pay_up[SIZE];//��¼����
double pay_down[SIZE];
double fit_up[SIZE];//��¼��Ӧ��
double fit_down[SIZE];
double all_pay_up = 0;//��¼�ϲ���ҵ�������
double all_pay_down = 0;//��¼�²���ҵ�������

//ofstream outfile1;



//���������������ģ�飬���ù���,ֱ���þ��У���randf()����ֱ�Ӳ���0-1������ȷֲ����������randi(x),����0---x-1���������
/*************************** RNG procedures ****************************************/
#define NN 624
#define MM 397
#define MATRIX_A 0x9908b0df   /* constant vector a */
#define UPPER_MASK 0x80000000 /* most significant w-r bits */
#define LOWER_MASK 0x7fffffff /* least significant r bits */
#define TEMPERING_MASK_B 0x9d2c5680
#define TEMPERING_MASK_C 0xefc60000
#define TEMPERING_SHIFT_U(y)  (y >> 11)
#define TEMPERING_SHIFT_S(y)  (y << 7)
#define TEMPERING_SHIFT_T(y)  (y << 15)
#define TEMPERING_SHIFT_L(y)  (y >> 18)

static unsigned long mt[NN]; /* the array for the state vector  */
static int mti = NN + 1; /* mti==NN+1 means mt[NN] is not initialized */
void sgenrand(unsigned long seed)
{
	int i;
	for (i = 0; i < NN; i++) {
		mt[i] = seed & 0xffff0000; seed = 69069 * seed + 1;
		mt[i] |= (seed & 0xffff0000) >> 16; seed = 69069 * seed + 1;
	}
	mti = NN;
}
void lsgenrand(unsigned long seed_array[])
{
	int i; for (i = 0; i < NN; i++) mt[i] = seed_array[i]; mti = NN;
}
double genrand()
{
	unsigned long y;
	static unsigned long mag01[2] = { 0x0, MATRIX_A };
	if (mti >= NN)
	{
		int kk;
		if (mti == NN + 1) sgenrand(4357);
		for (kk = 0; kk < NN - MM; kk++) {
			y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
			mt[kk] = mt[kk + MM] ^ (y >> 1) ^ mag01[y & 0x1];
		}
		for (; kk < NN - 1; kk++) {
			y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
			mt[kk] = mt[kk + (MM - NN)] ^ (y >> 1) ^ mag01[y & 0x1];
		}
		y = (mt[NN - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
		mt[NN - 1] = mt[MM - 1] ^ (y >> 1) ^ mag01[y & 0x1];
		mti = 0;
	}
	y = mt[mti++]; y ^= TEMPERING_SHIFT_U(y); y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
	y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C; y ^= TEMPERING_SHIFT_L(y);
	return y;
}

double randf() { return ((double)genrand() * 2.3283064370807974e-10); }
long randi(unsigned long LIM) { return((unsigned long)genrand() % LIM); }

bool create_directories_win(const std::string& path) 
{// ר��Windows·����������
    std::string current_path;
    
    // �滻·���е���б��Ϊ��б�ܣ�Windowsԭ�����
    std::string win_path = path;
    std::replace(win_path.begin(), win_path.end(), '/', '\\');

    // �𼶴���Ŀ¼
    for (size_t i = 0; i < win_path.length(); ++i) {
        current_path += win_path[i];
        if (win_path[i] == '\\' || i == win_path.length() - 1) {
            // �����̷���Ŀ¼����C:\��
            if (current_path.size() == 3 && current_path[1] == ':') continue;
            
            // ������ǰ��Ŀ¼
            if (!CreateDirectoryA(current_path.c_str(), NULL)) {
                DWORD err = GetLastError();
                if (err != ERROR_ALREADY_EXISTS) {
                    return false;
                }
            }
        }
    }
    return true;
}


/********************** END of RNG ************************************/


void initial(void)  //��ʼ�����Ժͺ�������
{
	cnt_s_up[0] = cnt_s_up[1] = 0;  //���²�ĺ�������������ʼ��Ϊ0
	cnt_s_down[0] = cnt_s_down[1] = 0;
	all_pay_up = 0;
    all_pay_down = 0;
	for (int i = 0; i < SIZE; i++)  //����ÿһ�����
	{
		int j = randi(2);
		tag_down[i] = j; //��ʼ���²��ǩ
		tag_up[i] = j; //��ʼ���ϲ��ǩ
		player_s_up[i] = randi(2);  //��ʼ���ϲ���ҵĲ���
		player_s_down[i] = randi(2);  //��ʼ���²���ҵĲ���
		cnt_s_up[player_s_up[i]]++;  //�����±�������ֱ�ͳ�����²�ĺ�����������
		cnt_s_down[player_s_down[i]]++;
		pay_up[i] = 0;
		pay_down[i] = 0;
		fit_up[i] = 0;
		fit_down[i] = 0;
		p[i] = 0.5;  //��ʼ���ʳ�ʼ��Ϊ0.5
	}
}


//�ҵ�������ҵ��ھ����
void prodgraph(void) {
	int x;
	int i, j;
	for (i = 0; i < L; i++)  //��i��
	{
		for (j = 0; j < L; j++)  //��j��
		{
			x = i * L + j;//����0��ʼ���������ڴ������ң��������µĵڼ���
			player_n[x][0] = i * L + ((j - 1 + L) % L);   //���ھӵ����
			player_n[x][1] = ((i - 1 + L) % L) * L + j;	  //���ھӵ����
			player_n[x][2] = ((i + 1) % L) * L + j;  	  //���ھӵ����
			player_n[x][3] = i * L + ((j + 1) % L);	      //���ھӵ����
			// player_n[x][4] = player_n[player_n[x][0]][1]; //���ھӵ����ھӣ�����
			// player_n[x][5] = player_n[player_n[x][0]][2]; //���ھӵ����ھӣ�����
			// player_n[x][6] = player_n[player_n[x][3]][1]; //���ھӵ����ھӣ�����
			// player_n[x][7] = player_n[player_n[x][3]][2]; //���ھӵ����ھӣ�����

			//��������Щ
			//player_n[x][4] = ((i - 1 + L) % L) * L + ((j - 1 + L) % L);
			//player_n[x][5] = ((i + 1) % L) * L + ((j - 1 + L) % L);
			//player_n[x][6] = ((i - 1 + L) % L) * L + ((j + 1) % L);
			//player_n[x][7] = ((i + 1) % L) * L + ((j + 1) % L);
		}
	}
}

//�ҵ�ÿ�鶼����Щ���
//void sectionalization()
//{
//	int i;
//	for (i = 0; i < GROUP_NUM; i++)
//	{
//		//ÿ�����ĸ��ˣ�ÿ���0~3����ҷֱ������Լ������ھӣ����ھӣ����½��ھ�
//		group[i][0] = i * 2;
//		group[i][1] = player_n[i * 2][3];
//		group[i][2] = player_n[i * 2][2];
//		group[i][3] = player_n[i * 2][7];
//		//�����ҵ����ĸ���Ҷ��ǵ�i���
//		player_group[i * 2] = i;
//		player_group[player_n[i * 2][3]] = i;
//		player_group[player_n[i * 2][2]] = i;
//		player_group[player_n[i * 2][7]] = i;
//	}
//}

void payoff_up(int x)
{//�ϲ��������
	double pay = 0;
	if (tag_up[x] == 0) //�������ϲ���ұ�ǩΪ0
	{
		for (int i = 0; i < 4; i++) //�������ĸ��ھ���
		{
			if (tag_up[player_n[x][i]] == 0)  //�ҵ���ǩҲ��0����ҽ��н���
			{
				pay += payoff_matrix[player_s_up[x]][player_s_up[player_n[x][i]]];
				same_up[x]++;
			}
		}
		pay_up[x] = pay;
	}
	if (tag_up[x] == 1)
	{
		for (int i = 0; i < 4; i++)
		{
			if (tag_up[player_n[x][i]] == 1)
			{
				pay += payoff_matrix[player_s_up[x]][player_s_up[player_n[x][i]]];
				same_up[x]++;
			}
		}
		pay_up[x] = pay;
	}
}

void payoff_down(int x)
{//�²��������
	double pay = 0;
	if (tag_down[x] == 0)
	{
		for (int i = 0; i < 4; i++)
		{
			if (tag_down[player_n[x][i]] == 0)
			{
				pay += payoff_matrix[player_s_down[x]][player_s_down[player_n[x][i]]];
				same_down[x]++;
			}
		}
		pay_down[x] = pay;
	}
	if (tag_down[x] == 1)
	{
		for (int i = 0; i < 4; i++)
		{
			if (tag_down[player_n[x][i]] == 1)
			{
				pay += payoff_matrix[player_s_down[x]][player_s_down[player_n[x][i]]];
				same_down[x]++;
			}
		}
		pay_down[x] = pay;
	}
}

void fitness_up(int x)  //�ϲ����Ӧ�ȣ���������ļ�Ȩƽ����
{
	double r, t;
	double pay = 0;
	int same = 0;
	for (int i = 0; i < 4; i++) //���ĸ��ھ���ķǹ����ڵ�
	{
		if (same_down[player_n[x][i]] != 0)
		{
			pay = pay + pay_down[player_n[x][i]];
			same++;
		}

	}
	if (same_down[x] != 0) //���Լ��ǲ��ǹ����ڵ�
	{
		pay = pay + pay_down[x] / 4;
		same++;
	}
	if (same == 0) //�����Ӧ���²�������һ�������ڵ㣬��ô��Ӧ�Ⱦ�������������
	{
		r = pay_up[x] / 4;
	}
	else //��Ȼ��Ӧ�Ⱦ�����������ļ�Ȩƽ����
	{
		t = pay / same; //�²��ƽ������
		r = para_a * t + (1 - para_a) * pay_up[x] / 4;
	}
		all_pay_up = all_pay_up + r;
	fit_up[x] = r;
}

double stimu(int x)
{
	double s, r;
	r = fit_up[x];
	s = tanh(bt * (r - A));
	return s;
}

//����x���²��Եĸ���
void calcul(int x)
{
	int i;
	double s;
	i = x;
	s = stimu(i);
	if ((s >= 0) && player_s_up[i] == 0)
	{
		p[i] = p[i] + (1 - p[i]) * s;
	}
	else if ((s < 0) && player_s_up[i] == 0)
	{
		p[i] = p[i] + p[i] * s;
	}
	else if ((s >= 0) && player_s_up[i] == 1)
	{
		p[i] = p[i] - p[i] * s;
	}
	else
	{
		p[i] = p[i] - (1 - p[i]) * s;
	}
}

void fitness_down(int x)    //�����²����Ӧ��,ֻ�б�ǩһ�²Ž���Ӱ��
{
	double r, t;
	double pay = 0;
	int same = 0;
	for (int i = 0; i < 4; i++) //���ĸ��ھ���ķǹ����ڵ�
	{
		if (same_up[player_n[x][i]] != 0)
		{
			pay = pay + pay_up[player_n[x][i]];
			same++;
		}

	}
	if (same_up[x] != 0) //���Լ��ǲ��ǹ����ڵ�
	{
		pay = pay + pay_up[x] / 4;
		same++;
	}
	if (same == 0) //�����Ӧ���²�������һ�������ڵ㣬��ô��Ӧ�Ⱦ�������������
	{
		r = pay_down[x] / 4;
	}
	else //��Ȼ��Ӧ�Ⱦ�����������ļ�Ȩƽ����
	{
		t = pay / same; //�ϲ��ƽ������
		r = para_a * t + (1 - para_a) * pay_down[x] / 4;
	}
	all_pay_down = all_pay_down + r;
	fit_down[x] = r;
}

void update_up(int x)  //�ϲ�BM���в��Ը���
{
	calcul(x);
	if (randf() <= p[x]) //���Ը���
	{
		cnt_s_up[player_s_up[x]]--;
		player_s_up[x] = 0;
		cnt_s_up[player_s_up[x]]++;
	}
	else
	{
		cnt_s_up[player_s_up[x]]--;
		player_s_up[x] = 1;
		cnt_s_up[player_s_up[x]]++;
	}
	int y;
	double prob_down = 0;
	y = player_n[x][int(randi(4))];
	if (tag_up[x] != tag_up[y])
	{
		prob_down = 1 / (1 + exp((fit_up[x] - fit_up[y]) / K));
	    if (randf() < prob_down)
		    tag_up[x] = tag_up[y]; //��ǩ����
	}
	return;
}

void update_down(int x)  //�²���׽��в��Ը���
{
	int y;
	double prob_down = 0;	// Probability of updating, initial not update
	y = player_n[x][int(randi(4))];
	if (player_s_down[x] != player_s_down[y])
	{//��������ѡ����ھӵĲ����ǲ�һ���ģ������Ƿ����ģ��
		prob_down = 1 / (1 + exp((fit_down[x] - fit_down[y]) / K));
		if (randf() < prob_down)//���Է����仯
		{
			if(player_s_down[x] == 0)
			{//C->D
				changetype_down[1]++;
			}
			else
			{//D->C
				changetype_down[2]++;
			}
			cnt_s_down[player_s_down[x]]--;	// Old strategy
			player_s_down[x] = player_s_down[y];
			cnt_s_down[player_s_down[x]]++;	// New strategy
			tag_down[x] = tag_down[y];  //ѧϰ��ǩ
		}
		else//����û��
		{
			if(player_s_down[x] == 0)
			{//C->C
				changetype_down[0]++;
			}
			else
			{//D->D
				changetype_down[3]++;
			}
		}
	}
	else//��������ѡ����ھӵĲ�����һ����
	{
		if(player_s_down[x] == 0)
		{//C->C
			changetype_down[0]++;
		}
		else
		{//D->D
			changetype_down[3]++;
		}
	}
}

void game(void) //���в���
{
	int n = SIZE;
	vector<int> nums(n);
	for (int i = 0; i < n; ++i)
	{
		nums[i] = i;
	}
	srand(time(0));
	for (int i = n - 1; i > 0; --i)
	{
		int j = rand() % (i + 1);
		swap(nums[i], nums[j]);
	}
	for (int i = 0; i < SIZE; i++)
	{
		int x = i;
		//int x = nums[i];  //���ѡ��һ��λ��
		payoff_up(x);
		payoff_down(x);
		fitness_up(x);
		fitness_down(x);
		update_up(x);  //�����ϲ�
		update_down(x);  //�����²�
	}
}

void draw_up(int step) 
{
    if(step == 0 || step == 1 || step == 10 || step == 100 || step == 1000 || step == 10000 || step == MC_STEPS-1)
    {
        // ����Ŀ���ļ���·��
        const string target_dir = "C:/Users/DELL/Desktop/BM�ͷ��׶��Ǳ�ǩ��ѧϰ˫��Ӱ��/����/BM��ͼ/";
		if (!create_directories_win(target_dir)) {
			DWORD error = GetLastError();
			std::cerr << "Ŀ¼����ʧ�� (������: 0x" << std::hex << error << ")" << std::endl;
			return;
		}        
		ostringstream filename;
        filename << target_dir << "��" << step << "���İ�ͼ_BM_a=" << para_a << "_b=" << b << ".txt";
        
        // ���ļ���д������
        std::ofstream file(filename.str());
        if(!file.is_open()) {
            std::cerr << "�����޷������ļ� " << filename.str() << std::endl;
            return;
        }

        // д���ͼ����
        for(int i = 0; i < L; i++) {
            for(int j = 0; j < L; j++) {
                if(tag_up[i + j * L] == 1 && player_s_up[i + j * L] == 0)
                    file << 0;
                else if(tag_up[i + j * L] == 2 && player_s_up[i + j * L] == 0)
                    file << 1;
                else if(tag_up[i + j * L] == 1 && player_s_up[i + j * L] == 1)
                    file << 2;
                else if(tag_up[i + j * L] == 2 && player_s_up[i + j * L] == 1)
                    file << 3;
                
                if (j != L - 1) 
                    file << " ";                    
            }
            file << "\n";    
        }
        file.close();
    }
}

void draw_down(int step)//�����ǿ��a���������ǿ��b������£���step���İ�ͼ
{//std::ostringstream �� C++ ��ר�����ڹ�����ʽ���ַ���������
		if(step == 0 || step == 1 || step == 10 || step == 100 || step == 1000 || step == 10000 || step == MC_STEPS-1)
		{
			const string target_dir = "C:/Users/DELL/Desktop/BM�ͷ��׶��Ǳ�ǩ��ѧϰ˫��Ӱ��/����/���װ�ͼ/";
			
			if (!create_directories_win(target_dir)) {
				DWORD error = GetLastError();
				std::cerr << "Ŀ¼����ʧ�� (������: 0x" << std::hex << error << ")" << std::endl;
				return;
			}

			ostringstream filename;
			filename<<target_dir<< "��" << step << "���İ�ͼ_����"<< "_a="<< para_a<< "_b="<< b << ".txt";
			ofstream file(filename.str(),ios::app);
			for(int i = 0; i < L; i++)
			{
				for(int j = 0; j < L; j++)
				{
					if(tag_down[i + j * L] == 1 && player_s_down[i + j * L] == 0)
						file <<0 ;
					if(tag_down[i + j * L] == 2 && player_s_down[i + j * L] == 0)
						file <<1 ;
					if(tag_down[i + j * L] == 1 && player_s_down[i + j * L] == 1)
						file <<2 ;
					if(tag_down[i + j * L] == 2 && player_s_down[i + j * L] == 1)
						file <<3 ;
					if (j != L - 1)//����������һ�У�ÿ���һ�����Ϳ�һ��
						file <<" ";					
				}
				file <<"\n";	
		    }
		  file.close(); // �ֶ��ر�
	     }
}

void C1C2D1D2(int step) 
{			
	const string target_dir = "C:/Users/DELL/Desktop/BM�ͷ��׶��Ǳ�ǩ��ѧϰ˫��Ӱ��/����/���׵�C1C2D1D2�ı���/";
    
	if (!create_directories_win(target_dir)) {
        DWORD error = GetLastError();
        std::cerr << "Ŀ¼����ʧ�� (������: 0x" << std::hex << error << ")" << std::endl;
        return;
    }

	ostringstream filename;
    filename<<target_dir<<"c1c2d1d2�ı���"<< "_a="<< para_a<< "_b="<< b<< ".txt";

    ofstream file(filename.str(), ios::app);

    int C1 = 0, C2 = 0, D1 = 0, D2 = 0;
    for (int i = 0; i < SIZE; i++)
	{
        if (tag_down[i] == 0 && player_s_down[i] == 0) C1++;
        else if (tag_down[i] == 0 && player_s_down[i] == 1) D1++;
        else if (tag_down[i] == 1 && player_s_down[i] == 0) C2++;
        else if (tag_down[i] == 1 && player_s_down[i] == 1) D2++;
    }

    // �������
    double C1_ratio = static_cast<double>(C1) / SIZE;
    double C2_ratio = static_cast<double>(C2) / SIZE;
    double D1_ratio = static_cast<double>(D1) / SIZE;
    double D2_ratio = static_cast<double>(D2) / SIZE;

    // д���ļ�
    file << step << " " << C1_ratio << " " << C2_ratio << " " << D1_ratio << " " << D2_ratio << "\n";
    if(step == MC_STEPS - 1)
	{
	   file.close();
	}
}

void CtoC_CtoD_DtoC_DtoD(int step) {
    // Ŀ��Ŀ¼·��
    const string target_dir = "C:/Users/DELL/Desktop/BM�ͷ��׶��Ǳ�ǩ��ѧϰ˫��Ӱ��/����/���׵�CCCDDCDD/";
  
    if (!create_directories_win(target_dir)) {
        DWORD error = GetLastError();
        std::cerr << "Ŀ¼����ʧ�� (������: 0x" << std::hex << error << ")" << std::endl;
        return;
    }

    // �����ļ���
    ostringstream filename;
    filename << target_dir << "CCCDDCDD�ı����沽���仯_����_" 
             << "a=" << para_a << "_b=" << b << ".txt";
    
    // ���ļ���׷��ģʽ��
    ofstream file(filename.str(), std::ios::app);
    
    // д�����ݣ����� + ����״̬ת������
    file << step << " " 
         << changetype_down[0] / static_cast<double>(SIZE) << " "
         << changetype_down[1] / static_cast<double>(SIZE) << " "
         << changetype_down[2] / static_cast<double>(SIZE) << " "
         << changetype_down[3] / static_cast<double>(SIZE) << "\n";
    
    if (step == MC_STEPS - 1) {
        file.close();
    }
}


ofstream create_timestamped_file(const string& base_filename) 
{
    // ��ȡ��ǰʱ��
    time_t now = std::time(nullptr);
    tm* local_time = std::localtime(&now);

    // ��ʱ���ʽ��Ϊ�ַ���
    char time_buffer[20];
    strftime(time_buffer, sizeof(time_buffer), "%Y%m%d_%H%M%S", local_time);

    // �����ļ���
    ostringstream filename_stream;
    filename_stream << time_buffer << "_" << base_filename;
    string filename = filename_stream.str();

    // ���ļ��������ļ���
    ofstream outfile;
    outfile.open(filename);
    return outfile;
}
// the main program
int main()
{
	int steps;
	double fc_up, fc_down, last_sum_up, last_sum_down, avg_fc_up, avg_fc_down;
	double last_pay_up;//�ϲ������ǧ���������
	double last_pay_down;//�²������ǧ���������
	double average_all_pay_up;//�ϲ�����ƽ��ֵ
	double average_all_pay_down;//�²�����ƽ��ֵ
	double cc,cd,dc,dd;
	double CC,CD,DC,DD;

	ofstream outfile2 = create_timestamped_file("average.txt");
	ofstream outfile3 = create_timestamped_file("average_payoff.txt");
	ofstream outfile4 = create_timestamped_file("average_cccddcdd.txt");
	ofstream outfile5 = create_timestamped_file("average_CCCDDCDD.txt");
	// initialize the random number generation
	sgenrand(RANDOMIZE);
	prodgraph();//�ҵ�������ҵ��ھӵ���Ų��洢��������
	//sectionalization();

	for (b = 1.60; b <= 1.91; b += 0.2)
	{
		for (para_a = 0; para_a <= 1.01; para_a += 0.05)
		{
			avg_fc_up = 0;
			last_sum_up = 0;
			avg_fc_down = 0;
			last_sum_down = 0;
			last_pay_up = 0;
			last_pay_down = 0;
			cc = cd = dc = dd = 0;
			CC = CD = DC = DD = 0;
			update_payoff_matrix(b);
			initial();

			const string target_dir = "C:/Users/DELL/Desktop/BM�ͷ��׶��Ǳ�ǩ��ѧϰ˫��Ӱ��/����/���²�������沽���仯/";
			if (!create_directories_win(target_dir)) 
			{
				DWORD error = GetLastError();
				std::cerr << "Ŀ¼����ʧ�� (������: 0x" << std::hex << error << ")" << std::endl;
				return 0 ;
			}
			ostringstream filename_stream;
			filename_stream <<target_dir<<"���²�������沽���仯_"<< "_b=" <<b<< "_a="<<para_a<<".txt";
			// ʹ�� C++ �ļ������ļ�
			ofstream outfile1(filename_stream.str());

			for (steps = 0; steps < MC_STEPS; steps++)
			{
				memset(same_up, 0, sizeof(same_up));
                memset(same_down, 0, sizeof(same_down));
				changetype_down[0] = changetype_down[1] = changetype_down[2]= changetype_down[3]= 0;
				game();
				fc_up = (double)cnt_s_up[0] / SIZE;	// OLD: tongji()
				fc_down = (double)cnt_s_down[0] / SIZE;

				average_all_pay_down = all_pay_down / SIZE;
				average_all_pay_up = all_pay_up / SIZE;

				all_pay_down = 0;
			    all_pay_up = 0;

                outfile1 << steps << "\t" << fc_up << "\t"<< fc_down<< "\n";

				if (steps < 10000)
				{
					CC = CC + changetype_down[0] / static_cast<double>(SIZE);
					CD = CD + changetype_down[1] / static_cast<double>(SIZE);
					DC = DC + changetype_down[2] / static_cast<double>(SIZE);
					DD = DD + changetype_down[3] / static_cast<double>(SIZE);
				}

				if (steps > MC_STEPS - OUT_STEPS - 1)
				{
					cc = cc + changetype_down[0] / static_cast<double>(SIZE);
					cd = cd + changetype_down[1] / static_cast<double>(SIZE);
					dc = dc + changetype_down[2] / static_cast<double>(SIZE);
					dd = dd + changetype_down[3] / static_cast<double>(SIZE);

					last_sum_up += fc_up;
					last_sum_down += fc_down;

					last_pay_down = last_pay_down + average_all_pay_down;
					last_pay_up = last_pay_up + average_all_pay_up;
				}

				draw_up(steps);
				draw_down(steps);
				C1C2D1D2(steps);
				CtoC_CtoD_DtoC_DtoD(steps);
			}

			avg_fc_up = (double)last_sum_up / OUT_STEPS;
			avg_fc_down = (double)last_sum_down / OUT_STEPS;

			last_pay_down = last_pay_down / OUT_STEPS;
			last_pay_up = last_pay_up / OUT_STEPS;

			cc = cc / OUT_STEPS;
			cd = cd / OUT_STEPS;
			dc = dc / OUT_STEPS;
			dd = dd / OUT_STEPS;

			CC = CC / 10000;
			CD = CD / 10000;
			DC = DC / 10000;
			DD = DD / 10000;

			cout << b << "\t" << para_a << "\t" << avg_fc_up << '\t' << avg_fc_down << endl;
			outfile2 << b << "\t" << para_a << "\t" << avg_fc_up << '\t' << avg_fc_down << endl;
			outfile3 << b << "\t" << para_a << "\t" << last_pay_up << '\t' << last_pay_down << endl;
			cout << b << "\t" << para_a << "\t" << last_pay_down << '\t' << last_pay_up << endl;

			outfile4 << b << "\t" << para_a << "\t" << cc  << "\t" << cd << "\t" << dc << "\t" << dd << endl;
			outfile5 << b << "\t" << para_a << "\t" << CC  << "\t" << CD << "\t" << DC << "\t" << DD << endl;			
		    outfile1.close(); // �ֶ��ر�
		}
	}

	outfile2.close();
	outfile3.close();
	outfile4.close();
	outfile5.close();
	return 0;
}

